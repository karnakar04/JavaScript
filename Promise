Promise:
#I will come to moive  8Pm 
A promise is special javaScript object that represents the eventual completion (or failure ) of an Asynchronous operation.
1.Three states:
•	1.Pending: Then initial state, the promise is still wating for the operation to finish
•	2.Fullied: The operation completed Successfully
•	3.Rejected: The operation failed

Example:
To create a promise new promise();
The promise  constructor takes a function with two parameters:
Resolve --- to mark as the promise is successful
Reject -to mark is as failed

Handling : 
.then() method is called when the promise is fulfilled.
It receives the result from the resolve();
.catch()  method is called when promise is rejected;
It receives the result from reject();
Example:
let myPromise=new Promise((resolve , reject)=>{

    let success = true
    if(success){
        resolve("The operation was succesfully")
    }else{
        reject("the operation failed")
    }
})
myPromise
.then(result=>{
    console.log(result)
})
.catch(erroe=>{
    console.log("Error")
})

Changing Promises:
--You can have chain multiple .then()
Ex:
let myPromise = new Promise((resolve, reject) => {
    resolve(5); // Initial resolved value is 5
});

myPromise
    .then(result => {
        console.log(result); // Logs: 5
        return result * 2;
    })
    .then(result => {
        console.log(result); // Logs: 10
        return result + 3;
    })
    .then(result => {
        console.log(result); // Logs: 13
    })
    .catch(error => {
        console.log("Error", error);
    });

1.Promise with setTimeOut
--using setTimeOut the promise will resolve certain amount of time
let delayedPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("Promise resolved after 2 seconds");
    }, 2000); 
});

delayedPromise
    .then(result => {
        console.log(result); 
    })
    .catch(error => {
        console.log("Error:", error);
    });

